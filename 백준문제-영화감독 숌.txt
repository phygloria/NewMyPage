24.07.15 - 백준문제 1436번 영화감독 숌
n번째...


1번째는 666
2번째는 1666
3번째는 2666
4번째는 3666


N <= 10,000 
N은 일만보다 작거나 같은 자연수


N이 1일때 R이 666
N이 5일때 R이 4666
N이 500일때 R이 166699

N은 증감하나?
//숌은 이 시리즈를 항상 차례대로 만듬
배열? 일만 이하까지?
반복문 ?

종말의 수 R(result)
= 6이 적어도 3개이상 연속으로 들어가는 수

R의 값을 구하는 식은 어떻게 만들지?
666이상의 정수(무한) 중에서 1만 이하 번째까지.
R >= 666

배열은 0번째가 첫번째..
1을 입력하면 666이 나와야함
2를 입력하면 1666
.
.

N을 입력받는다

// N + "666" 이건아님..




============================================
//▽GPT의 도움을 받음. 내 언어로 정리해보는 플로우시나리오 


R=종말의 수='666'이 포함된 수
666이상의 정수(무한) 중
1. 종말의 수 인지 확인하기

2. 666부터 시작해서 정수 증감++

3. 667, 668, 669, 670, . . . . 각 숫자가 '666'을 포함하는지 확인

4. 포함되면 true = 종말의 수 R
5. 포함안되면 false = 종말수 아님

6. ~...1664, 1665, 1666 -> 1666은 '666'이 포함되므로 종말의 수 이다. true

7. N번째로 구분해주기(카운트로 구분)
   //종말수를 찾을때마다 카운트 해준다.
   //카운트가 입력해준 N값과 같아지면 그 때 찾은 종말수가 N번째 종말수이다.

8. 첫번째 종말수는 666 (카운트 1)

9. 두번째 종말수는 1666(카운트 2)

10. N번째 종말수를 찾으면 화면에 출력해준다.



===================================
코드 플로우 시나리오 디테일하게! 
//구글링으로 코드디테일을 찾아가기


1. N값을 입력받음
// 입력받는 이유: N번째 의 종말수를 찾는 문제이기 때문에. N번째 종말수는 = (출력값)

int N = sc.nextInt(); //입력받을 숫자


2. 666부터 시작해서 정수 증감++
//숫자를 증가시킬 때는 int 형으로,

int num = 666; // num++;로 증감할 숫자


3. 각 숫자가 '666'을 포함하는지 확인하기
//666이 포함되는지를 검사할 때는 문자열로 검사하는게 좋다.

//문자열 검사 방법은 contains() 메소드를 사용하는 방법이 있다. //chatAt() 도 있음.
//contain 메소드는 해당 문자열 안에 검사하려는 
  문자열이 포함이 되어있는지를 검사하고, 
  검사하려는 문자열이 담겨있으면 true, 없으면 false 를 반환한다.

4. 확인한 검사가 '666'을 포함하면 카운트하기
int count = 1; // 카운트할 숫자

▽3,4번을 같이 쓴 코드
//int형인 num을 String으로 변환한 뒤, "666"이란 문자열이 있는지 검사
// 형변환? 할 때 contains 사용?
// valueOf도 나옴. 세트?

if (String.valueOf(num).contains("666")) {
	count++;
	}


// if의 ()안에 코드가 참일때 {}스코프 안의 코드를 실행해라.
//String.에 형변환해 담을 값은 (num)이고. contains()로 "666"이 포함되었는지 확인해서
  포함되면 참이다. => count++;이 실행됨.
  포함안되면 거짓. => 실행안됨.


5. while문으로 카운트하는 숫자가 N값과 같아질 때까지 반복할 로직을 짠다.
//while문은 몇번 반복해야할지 횟수를 알수없을때 사용하는 반복문
//while()의 ()안에 조건식을 쓰고 {}스코프에 실행할 코드로직을 쓴다
//while문은 ()안의 조건식이 참일때 실행하다가 거짓일때 종료

while(count != N) {}
//카운트가 아직 N번째까지 도달하지 않았으므로 {}스코프안에 코드를 반복해라.


while(count != N) { // 스코프안에 위에서 작성한 if문 코드를 넣는다.
	num++;
	//num을 증감해서 아래 if문이 반복될 수 있게 해준다. 1번실행하고 끝나면 안되니까.

	if (String.valueOf(num).contains("666")) {
	count++;
	}
}
 

6. while문이 돌려지면서 N값과 같아진 count를 만나서 종료가됨. 
그 때의 num의 숫자가 N번째의 "666"을 포함한 숫자이다.
그러므로 이제 출력.

System.out.println(num);


// 여기까지의 로직에 대한 간단설명 
  : 즉, 666 부터 시작하여 1씩 증가시켜 해당 값이 666 을 포함하고 있다면 count값을 증가시킨다. 
    그리고 count 값이 N 이랑 같아질 경우 해당 num 이 N번째 숫자가 되는 것이다.




//구글링 출처 [https://st-lab.tistory.com/103]